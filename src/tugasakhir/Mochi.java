/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tugasakhir;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import static tugasakhir.Main.findFilesInDirectory;

/**
 *
 * @author Dell
 */
public class Mochi extends javax.swing.JFrame {
    String dataset_path = System.getProperty("user.dir") + "\\dataset\\";
    String path_idx = System.getProperty("user.dir") + "\\inv_idx\\";
    File folder_idx = new File(path_idx);
    File cleaned_dataset = new File(System.getProperty("user.dir") + "\\cleaned_dataset\\");
    DataPreprocessing dp = new DataPreprocessing();
    InvertedIndex invIndex = new InvertedIndex();
    Map<String, List> invertedIndex = new TreeMap<String, List>();
    private String[] input = new String[]{};
    private String[] result = new String[]{};
    private String output = "";
    private String operasi = "";

    /**
     * Creates new form Mochi
     */
    public Mochi() {
        initPrepocessing();
        initComponents();
    }
    
    private void initPrepocessing() {
        if (cleaned_dataset.isDirectory()) {
            if (folder_idx.isDirectory()) {
                System.out.println("Inverted Index found"); //jika inv idx belum ada
                invIndex.loadMaps();
                invertedIndex = invIndex.getInvIndex();

            } else {
                System.out.println("Inverted Index not found, creating new.."); //jika inv idx sudah ada
                try {
                    invIndex.createInvertedIndex(findFilesInDirectory(System.getProperty("user.dir") + "\\cleaned_dataset\\"));
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Mochi.class.getName()).log(Level.SEVERE, null, ex);
                }
                invIndex.saveMaps();
                invIndex.loadMaps();
                invertedIndex = invIndex.getInvIndex();
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        searchButton = new javax.swing.JButton();
        orButton = new javax.swing.JButton();
        andButton = new javax.swing.JButton();
        inputTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        searchButton.setText("search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        orButton.setText("or");
        orButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orButtonActionPerformed(evt);
            }
        });

        andButton.setText("and");
        andButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                andButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("sansserif", 0, 36)); // NOI18N
        jLabel1.setText("Mochi");

        jLabel2.setText("Pilih operasi yang ingin dilakukan:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(inputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchButton))
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(orButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(andButton)))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orButton)
                    .addComponent(andButton))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void orButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orButtonActionPerformed
        // TODO add your handling code here:
        this.operasi = "OR";
        this.input = inputTextField.getText().split(" ");
        
        this.result = new String[this.input.length];
        for(int i=0; i<this.input.length; i++){
            this.result[i] = dp.data_processing_query(this.input[i]);
        }
        
        List<String> docContainer = new ArrayList<String>();
        
        for(int i=0; i<this.input.length; i++){
            docContainer = invertedIndex.get(this.result[i]);
            int h = 0;
            if (docContainer.size() > 0) {
                for (int j = 0; j < docContainer.size(); j++) {
                    this.output += docContainer.get(j) + "\n";
               }
            }
            docContainer.removeAll(docContainer);
        }        
        ResultForm rf = new ResultForm("","","");  
    }//GEN-LAST:event_orButtonActionPerformed

    private void andButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_andButtonActionPerformed
        // TODO add your handling code here:
        this.operasi = "AND";
        this.input = inputTextField.getText().split(" ");
        
        this.result = new String[this.input.length];
        for(int i=0; i<this.input.length; i++){
            this.result[i] = dp.data_processing_query(this.input[i]);
        }
        
        List<String> docContainer1 = new ArrayList<>();
        List<String> docContainer2 = new ArrayList<>();
        List<String> docContainerTempt = new ArrayList<>();
        
        int length = this.input.length;
        for(int i=0; i<this.input.length; i++){
            if(i==0){
                
                String s1 = this.result[i];
                String s2 = this.result[i+=1];
                docContainer1 = invertedIndex.get(s1);
                docContainer2 = invertedIndex.get(s2);
                
                    int idxKata1 = 0;
                    int idxKata2 = 0;

                    while (idxKata1 < docContainer1.size() && idxKata2 < docContainer2.size()) {
                        if (docContainer2.get(idxKata2).compareTo(docContainer1.get(idxKata1)) < 0) {
                            idxKata2++;
                        } else if (docContainer2.get(idxKata2).compareTo(docContainer1.get(idxKata1)) == 0) {
                            docContainerTempt.add(docContainer2.get(idxKata2));
                            idxKata2++;
                            idxKata1++;

                        } else {
                            idxKata1++;
                        }
                    }
                docContainer1.removeAll(docContainer1);
                docContainer2 =  docContainerTempt;
            } else if(i<=length) {
                String s = this.result[i];
                docContainer1 = invertedIndex.get(this.result[i]);
                if (docContainer1.size() > docContainerTempt.size()) {
                    int idxKata1 = 0;
                    int idxKata2 = 0;

                    while (idxKata1 < docContainer1.size() && idxKata2 < docContainerTempt.size()) {
                        if (docContainer2.get(idxKata2).compareTo(docContainer1.get(idxKata1)) < 0) {
                            docContainerTempt.remove(docContainer2.get(idxKata2));
                            idxKata2++;
                        } else if (docContainer2.get(idxKata2).compareTo(docContainer1.get(idxKata1)) == 0) {
                            docContainerTempt.add(docContainer2.get(idxKata2));
                            idxKata2++;
                            idxKata1++;

                        } else {
                            idxKata1++;
                        }
                    }
                }
                docContainer1.removeAll(docContainer1);
                docContainer2 =  docContainerTempt;
            }
        }
        for(int j=0; j<docContainerTempt.size(); j++){
            this.output += docContainerTempt.get(j) + "\n";
        }   
        ResultForm rf = new ResultForm("","","");  
    }//GEN-LAST:event_andButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        String result = "";
        String st = "";
//        String tokens[] = this.output.split("\n");
//        for(int i=0; i<tokens.length; i++){
//             File file = new File("D:\\Kuliah\\PTKI\\tugasakhir_ptki\\dataset" + tokens[i]); 
//  
//            try { 
//                BufferedReader br = new BufferedReader(new FileReader(file));
// 
//                while ((br.readLine()) != null) 
//                   st = br.readLine();
//            } catch (FileNotFoundException ex) {
//                Logger.getLogger(Mochi.class.getName()).log(Level.SEVERE, null, ex);
//            } catch (IOException ex) {
//                Logger.getLogger(Mochi.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
       
        this.setVisible(false);
        ResultForm rf = new ResultForm(this.output, st, this.operasi);
        rf.setVisible(true); 
    }//GEN-LAST:event_searchButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Mochi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Mochi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Mochi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Mochi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Mochi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton andButton;
    private javax.swing.JTextField inputTextField;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton orButton;
    private javax.swing.JButton searchButton;
    // End of variables declaration//GEN-END:variables

  
}
